Index: app/src/main/java/com/metaldetector/Algorithm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/metaldetector/Algorithm.java	(revision b3540f1f5c545e594d3708e461024ab93f9c9b9f)
+++ app/src/main/java/com/metaldetector/Algorithm.java	(revision )
@@ -12,56 +12,20 @@
 
     private static final int NUM_OF_INPUTS_PER_SENSOR = 600;
     private static final int DELIMITER = 10;
-    private ArrayList<Integer> sensor1Inputs;
-    private ArrayList<Integer> sensor2Inputs;
-    private double sensor1Frequency;
-    private double sensor2Frequency;
     int currentSensor;
-    double sensor1CalibratedFrequency;
-    double sensor2CalibratedFrequency;
+    private ArrayList<Sensor> sensors;
 
-    public double getSensorFrequency(int sensor) {
-        return sensor == 1 ? getSensor1Frequency() : getSensor2Frequency();
+    public ArrayList<Sensor> getSensors() {
+        return sensors;
     }
 
-    public void setFrequency(int sensor, double frequency) {
-        if (sensor == 1) {
-            if (sensor1CalibratedFrequency == 0) {
-                sensor1CalibratedFrequency = frequency;
+    public Algorithm(int numOfSensors) {
+        sensors = new ArrayList<>();
+        for (int i = 0; i < numOfSensors; i++) {
+            sensors.add(new Sensor());
-            }
+        }
-            setSensor1Frequency(frequency);
-        }
+    }
-        else {
-            if (sensor2CalibratedFrequency == 0) {
-                sensor2CalibratedFrequency = frequency;
-            }
-            setSensor2Frequency(frequency);
-        }
-    }
 
-    public double getSensor2Frequency() {
-        return sensor2Frequency;
-    }
-
-    public void setSensor1Frequency(double sensor1Frequency) {
-        this.sensor1Frequency = sensor1Frequency;
-    }
-
-    public void setSensor2Frequency(double sensor2Frequency) {
-        this.sensor2Frequency = sensor2Frequency;
-    }
-
-    public double getSensor1Frequency() {
-        return sensor1Frequency;
-    }
-
-    public Algorithm() {
-        sensor1Inputs = new ArrayList<>();
-        sensor2Inputs = new ArrayList<>();
-        sensor1CalibratedFrequency = 0;
-        sensor2CalibratedFrequency = 0;
-    }
-
     public void analyzePackets(ArrayList<byte[]> packets) {
 
         currentSensor = 1;
@@ -98,31 +62,8 @@
                 readBuffer[readBufferPosition++] = b;
             }
         }
-        calculateSensorFrequency(1);
-        calculateSensorFrequency(2);
     }
 
-    private void calculateSensorFrequency(int currentSensor) {
-        ArrayList<Integer> currentSensorInputs = currentSensor == 1 ? sensor1Inputs : sensor2Inputs;
-        int numOfCycles = getNumOfCycles(currentSensorInputs);
-        double freq = calcFrequency(currentSensorInputs, numOfCycles);
-        setFrequency(currentSensor, freq);
-        String preFix = "Sensor " + currentSensor;
-        Log.d("Algorithm", preFix +  " num of peaks: " + numOfCycles);
-        Log.d("Algorithm", preFix + " num of inputs: " + currentSensorInputs.size());
-        Log.d("Algorithm", preFix + " frequency: " + getSensorFrequency(currentSensor));
-
-        currentSensorInputs.clear();
-    }
-
-    private double calcFrequency(ArrayList<Integer> currentSensorInputs, int numOfPeaks) {
-        if (currentSensorInputs.size() == 0) {
-            return 0;
-        }
-        double freq = (double) (numOfPeaks * 10000) / (double) currentSensorInputs.size();
-        return (freq * 100) / (double) 110;
-    }
-
     private ArrayList<Byte> toOneByteArray(ArrayList<byte[]> packets) {
         ArrayList<Byte> bytes = new ArrayList<>();
         for (int j = 0; j < packets.size(); j++) {
@@ -133,55 +74,7 @@
         return bytes;
     }
 
-    public int getNumOfCycles(ArrayList<Integer> inputs) {
-        if (inputs.size() == 0 || inputs.size() == 1) {
-            Log.d("Algorithm", "No inputs received");
-            return 0;
+    private void addInputToArray(int input) {
+        sensors.get(currentSensor).addInput(input);
-        }
+    }
-
-        int numOfPeaks = 0;
-
-        boolean isUpwards = inputs.get(0) < inputs.get(1);
-        boolean startUpwards = isUpwards;
-        for (int cur = 1; cur < inputs.size(); cur++) {
-            int curInput = inputs.get(cur);
-            int prevInput = inputs.get(cur - 1);
-
-            if (isUpwards) {
-                if (curInput < prevInput) {
-                    numOfPeaks++;
-                }
-            }
-            isUpwards = prevInput <= curInput;
-        }
-
-        int numOfCycles = numOfPeaks;
-        numOfCycles = adjustLastCycle(inputs, isUpwards, startUpwards, numOfCycles);
-
-        return numOfCycles;
-    }
-
-    private int adjustLastCycle(ArrayList<Integer> inputs, boolean isUpwards, boolean startUpwards, int numOfCycles) {
-        int firstInput = inputs.get(0);
-        int lastInput = inputs.get(inputs.size()-1);
-        if ((startUpwards && (!isUpwards || lastInput < firstInput)) || (!startUpwards && !isUpwards && lastInput > firstInput)) {
-            numOfCycles--;
-        }
-        return numOfCycles;
-    }
-
-    private void addInputToArray(int dataNum) {
-        if (currentSensor == 1) {
-            sensor1Inputs.add(dataNum);
-        }
-        else if (currentSensor == 2) {
-            sensor2Inputs.add(dataNum);
-        }
-    }
-
-    public boolean calcHasMetal(int curSensor, double sensorFrequency) {
-        double calibratedFreq = curSensor == 1 ? sensor1CalibratedFrequency : sensor2CalibratedFrequency;
-        return Math.abs(sensorFrequency - calibratedFreq) >  30;
-    }
-
 }
Index: app/app.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/app.iml	(revision b3540f1f5c545e594d3708e461024ab93f9c9b9f)
+++ app/app.iml	(revision )
@@ -64,14 +64,6 @@
       <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/shaders" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
@@ -80,6 +72,14 @@
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/shaders" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/rs" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/shaders" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/builds" />
\ No newline at end of file
Index: app/src/main/java/com/metaldetector/ListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/metaldetector/ListActivity.java	(revision b3540f1f5c545e594d3708e461024ab93f9c9b9f)
+++ app/src/main/java/com/metaldetector/ListActivity.java	(revision )
@@ -39,13 +39,8 @@
 //         Hide title bar
         getSupportActionBar().hide();
 
-//        // Go to full screen
-//        this.getWindow().setFlags(WindowManager.LayoutParams.
-//                FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
-
         BTAdapter = BluetoothAdapter.getDefaultAdapter();
 
-
         // Phone does not support Bluetooth so let the user know and exit.
         if (BTAdapter == null) {
             new AlertDialog.Builder(this)
@@ -69,7 +64,7 @@
 
         mDeviceListFragment = DeviceListFragment.newInstance(BTAdapter);
         fragmentManager.beginTransaction().replace(R.id.container, mDeviceListFragment).commit();
-        alg = new Algorithm();
+        alg = new Algorithm(2);
     }
 
     @Override
@@ -149,11 +144,19 @@
         ArrayList<byte[]> packets = manageConnectThread.getPackets();
         alg.analyzePackets(packets);
 
-//        String sensor1HasMetal = alg.calcHasMetal(1, alg.getSensor1Frequency()) ? "Has Metal" : "No Metal";
-//        String sensor2HasMetal = alg.calcHasMetal(2, alg.getSensor2Frequency()) ? "Has Metal" : "No Metal";
-//
-//        mDeviceListFragment.calibrationResult.setText("Sensor 1: " + sensor1HasMetal + "\n"
-//                + "Sensor 2: " + sensor2HasMetal);
+        ArrayList<Sensor> sensors = alg.getSensors();
+        Sensor currentSensor;
+        for (int i = 0; i < sensors.size(); i++) {
+            currentSensor = sensors.get(i);
+            currentSensor.calcFrequency();
+            String preFix = "Sensor " + i;
+            Log.d(preFix, " num of peaks: " + numOfCycles);
+            Log.d(preFix, " num of inputs: " + currentSensorInputs.size());
+            Log.d(preFix, " frequency: " + getSensorFrequency(sensorIndex));
+            mDeviceListFragment.changeColor();
+        }
+
+
 
         mDeviceListFragment.changeColor(alg.calcHasMetal(1, alg.getSensor1Frequency()), 1);
         mDeviceListFragment.changeColor(alg.calcHasMetal(2, alg.getSensor2Frequency()), 2);
